import random
from tkinter import *
from tkinter.filedialog import asksaveasfile
from docx import Document
from docx.shared import Pt

name_list = [
"James", "Mary", "Destin-Jay", "Patricia", "John", "Jennifer", "Garrick", "Linda", "Dave", "Faith", "William", "Elijah",
 "Boodoo", "Susannah", "Emily", "Jess", "Deborah", "Sarah", "Charlie", "Mckayla", "Chris", "Amy", "Judy", "Ruth",
 "Alice", "Betty", "Anthony", "Margaret", "Mark", "Holland", "Donovan", "Ashley", "Poasie", "Job", "Paul", "Emily",
 "Louisa", "Deverick", "Rylan", "George", "Melissa", 'Eliza Faith', 'Rock',
 "Timothy", "Deborah", "Ronald", "Stephanie", "Carrie-Ann", "Valerie", "Louisa", "Winter", "Daylen", "Donovan", "Daniro",
 "Cynthia", "Jacob", "Braelyn", "Amy", "Nicholas", "Angela", "Eric", "Shirley", "Jonathan", "Anna", "Stephen",
 "Brenda", "Linden", "Peter", "Justin", "Gilbert", "Nehemiah", "Nicole", "Brandon", "Samantha", "Sam",
  "Ruthannah", "Jose", "Julie", "Adam", 'Michael', 'Haven', 'Derek'
 "SamWillie", "Xavier", "Briar", "Zachary", "Dakotah", "Thomussie", "Connor"
 ]
item_list1 = ['ptarmigan', 'caribou', 'rabbits', 'snowshoes', 'beavers', 'moccasins', 'slushies', 'pieces of bannock']
item_list_box = ['pencils', 'Pizza Pockets', 'fried chicken wings', 'donuts', 'bullets']
actions1 = ['had', 'owned','was given', 'received']
actionssub = ['sold', 'gave away', 'lost']
actionsadd = ['were given', 'found', 'purchased', 'bought' ]
gather_list = ['labrador Tea', 'blueberries', 'cloudberries', 'wild rasberries', 'crowberries''redberries', 'black berries', 'wildberries']

# attributes to be used. actions1_item is for initial part of certain questions - ex - sam HAS 10 things (HAS = actions1_item),
# actionssub_item, actionadd_item etc are the action verbs that make up the 2nd part of question - ie she LOSES 5 things (LOSES = actionsub_item)

class Question:
    def __init__(self):
        pass

    # all following generate functions will return the sentence as a string, followed by the correct answer
    # generates a question with subtraction(with the gi# also returns answer - format (sentence, answer)
    def generate_sub_quest(self, lower, upper, negative):
        name_item = random.choice(name_list)
        item_item = random.choice(item_list1)
        actions1_item = random.choice(actions1)
        actionsub_item = random.choice(actionssub)
        num1 = random.randint(lower, upper)
        num2 = random.randint(lower, upper)
        if negative == 'y':
            sentence = f"{name_item} {actions1_item} {num1} {item_item}, they {actionsub_item} {num2}, how many {item_item} are left?"
            answer = num1 - num2
        else:
            while True:
                if num1 > num2:
                    sentence = f"{name_item} {actions1_item} {num1} {item_item}, they {actionsub_item} {num2}, how many {item_item} are left?"
                    answer = num1 - num2
                    break
                else:
                    num1 = random.randint(lower, upper)
                    num2 = random.randint(lower, upper)
        return sentence, answer

    # generates a question with addition(with the given parameters above)
    # also returns answer - format (sentence, answer)
    def generate_add_quest(self, lower, upper):
        name_item = random.choice(name_list)
        item_item = random.choice(item_list1)
        actions1_item = random.choice(actions1)
        actionadd_item = random.choice(actionsadd)
        num1 = random.randint(lower, upper)
        num2 = random.randint(lower, upper)
        sentence = f"{name_item} {actions1_item} {num1} {item_item}, they {actionadd_item} {num2} more, how many {item_item} do they have now?"
        answer = num1 + num2
        return sentence, answer

    def generate_mult_box(self, lower, upper):
        name_item = random.choice(name_list)
        item_item = random.choice(item_list_box)
        num1 = random.randint(lower, upper)
        num2 = random.randint(lower, upper)
        actions1_item = random.choice(actions1)
        sentence = f'{name_item} {actions1_item} {num1} boxes of {item_item}, if there are {num2} {item_item} in each box, how many are there total? '
        answer = num1 * num2
        return sentence, answer

    def generate_mult_drive(self, lower, upper):
        name_item = random.choice(name_list)
        num1 = random.randint(lower, upper)
        num2 = random.randint(lower, upper)
        sentence = f'{name_item} is heading to camp. They are driving {num1} km per hour (km/h) on their Honda, if they drive for {num2} hours, how far have they travelled?'
        answer = num1 * num2
        return sentence, answer

    def generate_divis_drive(self, lower, upper, whole):
        num1 = random.randint(lower, upper)
        num2 = random.randint(lower, upper)
        name_item = random.choice(name_list)
        # check if dividend is larger than divisor
        if whole == 'y':
            while num1 % num2 != 0 or num1 == num2:
                num1 = random.randint(lower, upper)
                num2 = random.randint(lower, upper)
            else:
                sentence = f'{name_item} is planning their trip to camp. Their Camp is {num1} km away, How fast will they need to drive on average to arrive there in {num2} hours?'
                answer = num1 / num2

        # when we dont need whole numbers for answer
        elif whole == 'n':
            sentence = f'{name_item} is planning their trip to camp. Their Camp is {num1} km away, How fast will they need to drive on average to arrive there in {num2} hours?'
            answer = num1 / num2
        else:
            raise ValueError('Please input y or n for "whole"')

        return sentence, answer

    def generate_divis_gather(self, lower, upper, whole):
        num1 = random.randint(lower, upper)
        num2 = random.randint(lower, upper)
        name_item = random.choice(name_list)
        item_item = random.choice(gather_list)
        # check if dividend is larger than divisor
        if whole == 'y':
            while num1 % num2 != 0 or num1 == num2:
                num1 = random.randint(lower, upper)
                num2 = random.randint(lower, upper)
            else:
                sentence = f' {name_item} is gathering {item_item} for their family. They need to gather {num1} grams of it to have enough. If they are gathering {num2} grams per hour, how many hours will it take them to gather enough?'
                answer = num1 / num2

        # when we dont need whole numbers for answer
        elif whole == 'n':
            sentence = f'{name_item} is gathering {item_item} for their family. They need to gather {num1} grams of it to have enough. If they are gathering {num2} grams per hour, how many hours will it take them to gather enough?'
            answer = num1 / num2

        else:
            raise ValueError('Please input y or n for "whole"')
        return sentence, answer


q1 = Question()

# GUI STUFF BELOW
# main window for gui
rad_font = ('Cambria', 20)
alt_font = ('Cambria', 14)


class BigWindow:
    def __init__(self, root, title, geometry):
        self.root = root
        self.root.title(title)
        self.root.geometry(geometry)

        # labels for columns
        operator_label = Label(self.root, text='Choose Operator', font=('calibri', 20, 'bold'))
        operator_label.grid(row=0, column=0)

        min_label = Label(self.root, text='Min Value', font=('calibri', 20, 'bold'))
        min_label.grid(row=0, column=1)

        max_label = Label(self.root, text='Max Value', font=('calibri', 20, 'bold'))
        max_label.grid(row=0, column=2)

        option_label = Label(self.root, text='Number of Questions:', font=('calibri', 14))
        option_label.grid(row=2, column=3, sticky=SW)
        # create check buttons for operators
        self.addbutt = IntVar()
        self.subbutt = IntVar()
        self.multbutt = IntVar()
        self.divbutt = IntVar()
        self.decbutt = IntVar()

        Check1 = Checkbutton(self.root, text='Addition', variable=self.addbutt, onvalue=1, offvalue=0, font=rad_font,
                             pady=40)
        Check1.grid(row=1, column=0, sticky='W')
        Check2 = Checkbutton(self.root, text='Subtraction', variable=self.subbutt, onvalue=1, offvalue=0, font=rad_font,
                             pady=40)
        Check2.grid(row=2, column=0, sticky='W')
        Check3 = Checkbutton(self.root, text='Multiplication', variable=self.multbutt, onvalue=1, offvalue=0,
                             font=rad_font, pady=40)
        Check3.grid(row=3, column=0, sticky='W')
        Check4 = Checkbutton(self.root, text='Division', variable=self.divbutt, onvalue=1, offvalue=0, font=rad_font,
                             pady=40)
        Check4.grid(row=4, column=0, sticky='W')

        # option check buttons
        #
        # Checkdec = Checkbutton(self.root, text='Include decimal answers?', variable=self.decbutt, onvalue=1, offvalue=0, font = ('calibri', 12), pady=40)
        # Checkdec.grid(row=4, column=3, sticky='W')

        # entry widgets for min max
        self.e_add_minvar = StringVar()
        e_add_min = Entry(self.root, bd=4, relief='sunken', textvariable=self.e_add_minvar, selectborderwidth=5,
                          font=('Calibri', 20), width=8)
        e_add_min.grid(column=1, row=1, padx=40)
        self.e_add_minvar.set('2')

        self.e_add_maxvar = StringVar()
        e_add_max = Entry(self.root, bd=4, relief='sunken', textvariable=self.e_add_maxvar, selectborderwidth=5,
                          font=('Calibri', 20), width=8)
        e_add_max.grid(column=2, row=1, padx=40)
        self.e_add_maxvar.set('20')

        self.e_sub_minvar = StringVar()
        e_sub_min = Entry(self.root, bd=4, relief='sunken', textvariable=self.e_sub_minvar, selectborderwidth=5,
                          font=('Calibri', 20), width=8)
        e_sub_min.grid(column=1, row=2, padx=40)
        self.e_sub_minvar.set('2')

        self.e_sub_maxvar = StringVar()
        e_sub_max = Entry(self.root, bd=4, relief='sunken', textvariable=self.e_sub_maxvar, selectborderwidth=5,
                          font=('Calibri', 20), width=8)
        e_sub_max.grid(column=2, row=2, padx=40)
        self.e_sub_maxvar.set('20')

        self.e_mult_minvar = StringVar()
        e_mult_min = Entry(self.root, bd=4, relief='sunken', textvariable=self.e_mult_minvar, selectborderwidth=5,
                           font=('Calibri', 20), width=8)
        e_mult_min.grid(column=1, row=3, padx=40)
        self.e_mult_minvar.set('2')

        self.e_mult_maxvar = StringVar()
        e_mult_max = Entry(self.root, bd=4, relief='sunken', textvariable=self.e_mult_maxvar, selectborderwidth=5,
                           font=('Calibri', 20), width=8)
        e_mult_max.grid(column=2, row=3, padx=40)
        self.e_mult_maxvar.set('20')

        self.e_div_minvar = StringVar()
        e_div_min = Entry(self.root, bd=4, relief='sunken', textvariable=self.e_div_minvar, selectborderwidth=5,
                          font=('Calibri', 20), width=8)
        e_div_min.grid(column=1, row=4, padx=40)
        self.e_div_minvar.set('2')

        self.e_div_maxvar = StringVar()
        e_div_max = Entry(self.root, bd=4, relief='sunken', textvariable=self.e_div_maxvar, selectborderwidth=5,
                          font=('Calibri', 20), width=8)
        e_div_max.grid(column=2, row=4, padx=40)
        self.e_div_maxvar.set('100')

        # entry for number of questions
        self.e_questvar = StringVar()
        e_quest = Entry(self.root, bd=4, relief='sunken', textvariable=self.e_questvar, selectborderwidth=5,
                        font=('Calibri', 20), width=8)
        e_quest.grid(column=3, row=3, padx=40, sticky=NW)
        self.e_questvar.set('15')

        # create/submit button
        create_button = Button(self.root, text='Create Document', width=40, font=('calibri', 18),
                               command=self.create_doc)
        create_button.grid(row=5, column=1, columnspan=2)

        self.root.mainloop()

        # function to get all inputs to connect to submit/create button

    def get_inputs(self):
        # get variables from input
        # minimums and maximums
        minadd = self.e_add_minvar.get()
        maxadd = self.e_add_maxvar.get()
        minsub = self.e_sub_minvar.get()
        maxsub = self.e_sub_maxvar.get()
        minmult = self.e_mult_minvar.get()
        maxmult = self.e_mult_maxvar.get()
        mindiv = self.e_div_minvar.get()
        maxdiv = self.e_div_maxvar.get()
        # number of questions
        quest_ent = self.e_questvar.get()
        # click buttons
        clk_add = self.addbutt.get()
        clk_sub = self.subbutt.get()
        clk_mult = self.multbutt.get()
        clk_div = self.divbutt.get()

        # error handling, check for only ints
        try:
            minadd = int(minadd)
            maxadd = int(maxadd)
            minsub = int(minsub)
            maxsub = int(maxsub)
            minmult = int(minmult)
            maxmult = int(maxmult)
            mindiv = int(mindiv)
            maxdiv = int(maxdiv)
            quest_ent = int(quest_ent)
        except:
            self.display_error()

        else:
            constraints = (minadd, maxadd, minsub, maxsub, minmult, maxmult, mindiv, maxdiv)
            clicks = (clk_add, clk_sub, clk_mult, clk_div)
            return constraints, clicks, quest_ent

        # displays top level window error if input is not integer

    def display_error(self):
        errtop = Toplevel(self.root)
        errtop.title("Number Input Error")
        errtop.geometry('350x115')
        errlabel = Label(errtop, font=alt_font,
                         text="Please only input numbers,\n I'm not a particularly smart program").pack()
        errbutt = Button(errtop, text='close', borderwidth=3, width=30, relief='raised', font=alt_font,
                         command=errtop.destroy).pack()

    def click_err_screen(self):
        e_wind = Toplevel(self.root)
        e_wind.title("WhaMATHoostui Worksheet Generator")
        e_wind.geometry('350x115')
        elabel = Label(e_wind, font=alt_font, pady=10,
                       text="Please select at least 1 operator").pack()

        ebutt = Button(e_wind, text='Close', borderwidth=3, pady = 10, width=30, relief='raised', font=alt_font,
                       command=e_wind.destroy).pack()
    def file_err_screen(self):
        f_wind = Toplevel(self.root)
        f_wind.title("WhaMATHoostui Worksheet Generator")
        f_wind.geometry('450x160')
        flabel = Label(f_wind, font=alt_font, pady=10,
                       text="Please ensure all Microsoft Word windows are closed.\nIf error persists, \nemail screenshot to rileymichaelmorris@gmail.com.\n")
        flabel.pack()

        fbutt = Button(f_wind, text='Close', borderwidth=3, width=30, relief='raised', font=alt_font,
                       command=f_wind.destroy)
        fbutt.pack()

    def final_screen(self):
        ftop = Toplevel(self.root)
        ftop.title("WhaMATHoostui Worksheet Generator")
        ftop.geometry('350x115')
        flabel = Label(ftop, font=alt_font, pady=10,
                       text="File Created!").pack()
        fbutt = Button(ftop, text='Close', borderwidth=3, width=30, relief='raised', font=alt_font,
                       command=self.root.destroy).pack()

    # document creation function
    def create_doc(self):
        q_list = []
        questions = []
        answers = []
        constraints = self.get_inputs()[0]
        clicks = self.get_inputs()[1]
        questnum = self.get_inputs()[2]

        if clicks[0] == 0 and clicks[1] == 0 and clicks[2] == 0 and clicks[3] == 0:
            self.click_err_screen()

        # logic to generate questions to a list, will generate questnum for each, then randomly pull for doc generation
        for i in range(questnum):
            # addition
            if clicks[0] == 1:
                q_list.append(q1.generate_add_quest(constraints[0], constraints[1]))
            # subtraction
            if clicks[1] == 1:
                q_list.append(q1.generate_sub_quest(constraints[2], constraints[3], 'n'))
        for i in range(round(questnum / 2)):
            # multiplication
            if clicks[2] == 1:
                q_list.append(q1.generate_mult_drive(constraints[4], constraints[5]))
                q_list.append(q1.generate_mult_box(constraints[4], constraints[5]))
            if clicks[3] == 1:
                q_list.append(q1.generate_divis_drive(constraints[6], constraints[7], 'y'))
                q_list.append(q1.generate_divis_gather(constraints[6], constraints[7], 'y'))

        for i in range(questnum):
            item = random.choice(q_list)
            questions.append(item[0])
            answers.append(item[1])

        # doc stuff
        try:
            document = Document()
            style = document.styles['Normal']
            font = style.font
            font.name = 'Nirmala UI Semilight'
            font.size = Pt(14)
            document.add_paragraph('WhapMATHoostui Math                          NAME______________________\n')
            for i in range(questnum):
                document.add_paragraph(f'{i + 1}. {questions[i]}\n\n')
            f = asksaveasfile(initialfile='Untitled.docx', defaultextension="*.*", filetype=[('Word Document', '*.docx')])
            document.save(f.name)
            self.final_screen()
        except:
            self.file_err_screen()


class Main:
    root = Tk()
    Window1 = BigWindow(root, "WhaMATHoostui Worksheet Generator", "960x650")


Main()
