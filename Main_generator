import random
from tkinter import *

name_list = [
"James", "Mary", "Destin-Jay", "Patricia", "John", "Jennifer", "Garrick", "Linda", "Dave", "Faith", "William", "Elijah",
 "Boodoo", "Susannah", "Emily", "Jess", "Deborah", "Sarah", "Charlie", "Mckayla", "Chris", "Amy", "Judy", "Ruth",
 "Alice", "Betty", "Anthony", "Margaret", "Mark", "Holland", "Donovan", "Ashley", "Steve", "Kim", "Paul", "Emily",
 "Louisa", "Donna", "Josh", "George", "Melissa",
 "Timothy", "Deborah", "Ronald", "Stephanie", "Carrie-Ann", "Valerie", "Louisa", "Winter", "Daylen", "Donovan", "Daniro",
 "Cynthia", "Jacob", "Braelyn", "Gary", "Amy", "Nicholas", "Angela", "Eric", "Shirley", "Jonathan", "Anna", "Stephen",
 "Brenda", "Linden", "Peter", "Justin", "Gilbert", "Nehemiah", "Nicole", "Brandon", "Helen", "Benjamin", "Samantha", "Sam",
 "Jack", "Catherine", "Dennis", "Maria", "Jerry", "Heather", "Tyler", "Diane", "Aaron", "Ruth", "Jose", "Julie", "Adam",
 "Samwillie", "Xavier", "Briar", "Zachary", "Dakotah", "Thomussie"
 ]
item_list1 = ['ptarmigan', 'caribou', 'rabbits', 'snowshoes', 'beavers', 'moccasins', 'slushies', 'pieces of bannock']
item_list_box = ['pencils', 'crayons', 'markers', 'highlighters', 'stickers']
actions1 = ['had', 'owned','was given', 'received']
actionssub = ['sold', 'gave away', 'lost']
actionsadd = ['were given', 'found', 'purchased', 'bought' ]
# attributes to be used. actions1_item is for initial part of certain questions - ex - sam HAS 10 things (HAS = actions1_item),
# actionssub_item, actionadd_item etc are the action verbs that make up the 2nd part of question - ie she LOSES 5 things (LOSES = actionsub_item)


class Question:
    def __init__(self):
        pass

    #all following generate functions will return the sentence as a string, followed by the correct answer
    # generates a question with subtraction(with the gi# also returns answer - format (sentence, answer)
    def generate_sub_quest(self, lower1, upper1, lower2, upper2):
         name_item = random.choice(name_list)
         item_item = random.choice(item_list1)
         actions1_item = random.choice(actions1)
         actionsub_item = random.choice(actionssub)
         num1 = random.randint(lower1, upper1)
         num2 = random.randint(lower2, upper2)
         sentence = f"{name_item} {actions1_item} {num1} {item_item}, they {actionsub_item} {num2}, how many {item_item} are left?"
         answer = num1 - num2
         return sentence, answer

    # generates a question with addition(with the given parameters above)
    # also returns answer - format (sentence, answer)
    def generate_add_quest(self, lower1, upper1, lower2, upper2):
        name_item = random.choice(name_list)
        item_item = random.choice(item_list1)
        actions1_item = random.choice(actions1)
        actionadd_item = random.choice(actionsadd)
        num1 = random.randint(lower1, upper1)
        num2 = random.randint(lower2, upper2)
        sentence = f"{name_item} {actions1_item} {num1} {item_item}, they {actionadd_item} {num2} more, how many {item_item} do they have now?"
        answer = num1 + num2
        return sentence, answer


    def generate_mult_box(self, lower1, upper1, lower2, upper2):
        name_item = random.choice(name_list)
        item_item = random.choice(item_list_box)
        num1 = random.randint(lower1, upper1)
        num2 = random.randint(lower2, upper2)
        actions1_item = random.choice(actions1)
        sentence = f'{name_item} {actions1_item} {num1} boxes of {item_item}, if there are {num2} {item_item} in each box, how many are there total? '
        answer = num1 * num2
        return sentence, answer

    def generate_mult_drive(self, lower1, upper1, lower2, upper2):
        name_item = random.choice(name_list)
        num1 = random.randint(lower1, upper1)
        num2 = random.randint(lower2, upper2)
        sentence = f'{name_item} is heading to camp. They are driving {num1} km per hour (km/h) on their Honda, if they drive for {num2} hours, how far have they travelled?'
        answer = num1 * num2
        return sentence, answer

    def generate_divis_drive(self, lower1, upper1, lower2, upper2, whole):
        num1 = random.randint(lower1, upper1)
        num2 = random.randint(lower2, upper2)
        name_item = random.choice(name_list)
        #check if dividend is larger than divisor
        if whole == 'y' and num1 < num2:
            raise ValueError('first number must be adequately higher than second to generate even answers')
        # generate whole numbers for answer
        elif whole == 'y' and num1 > num2:
            while num1 % num2 != 0:
                num1 = random.randint(lower1, upper1)
                num2 = random.randint(lower2, upper2)
            else:
                sentence = f'{name_item} is planning their trip to camp. Their Camp is {num1} km away, How fast will they need to drive to arrive there in {num2} hours?'
                answer = num1/num2

        #when we dont need whole numbers for answer
        elif whole == 'n':
            sentence = f'{name_item} is planning their trip to camp. Their Camp is {num1} km away, How fast will they need to drive to arrive there in {num2} hours?'

        else:
            raise ValueError('Please input y or n for "whole"')

        return sentence, answer


q1 = Question()

#
# print(q1.generate_sub_quest(1, 10, 11, 19))
# print(q1.generate_add_quest(1, 10, 11, 19))
# print(q1.generate_mult_box(1, 10, 11, 19))
# print(q1.generate_mult_drive(1, 10, 11, 19))
print(q1.generate_divis_drive(100, 200, 5, 20, 'y'))
# class Window:
#     def __init__(self, root, title,  )

# class Main:
#     root = Tk()
#     Window1 =
